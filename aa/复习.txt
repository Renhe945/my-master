
Python:
	  Python是一门解释型语言
	  数据类型：int float bool str list tuple dict set
	  循环： while   for...range()
	  分支语句：if..elif..else
	  循环和分支：for...else..
	  列表方法： append  remove insert  extend  sort  index  count
	  元组：元组不可变
	  字典：k,v结构，k不能用可变类型数据
	  集合：集合去重，通过集合快速列表的重复数据
	  可变和不可变：
	  		可变：list dict set
	  		不可变：int float bool str tuple
	  字符串方法：startswith replace split
	  函数：
	  	   参数：定长参数，默认参数，可变长参数，关键字参数
	  	   返回值:默认返回None,可以返回多个值
	  	   匿名函数：lambda
	  	   递归函数：
	  	   算法：
	  	   		冒泡算法
	  	   		二分法
	  切片：
	  	  l[::-1] 倒序
	  面向对象：
	  		 类和对象：类是对象的模子，对象是类的具体实例
			 魔法方法： __init__  __str__
			 继承：多继承
			 类属性：像Java的静态变量
			 类方法： @classMethod
			 静态方法：@staticMethod
			 属性方法：@property
	  文件操作：open() 默认：w(写) r(读) a(追加)
	  异常：try...except
	  模块和包：
	  		模块:单个py文件就叫模块
	  		包：多个py文件,并且文件夹中拥有__init__.py
	  推导式：
	  		列表推导式：[i for i in range(10)]
	  		字典推导式: {}
	  		集合推导式：{}

	  装饰器：
	  		语法糖，前提知识需要知道闭包
	  		在不改变原本逻辑，实现功能对外扩展
	  多线程：
	  包管理: pip
	  集成环境：anaconda

	  第三方库：
	  		 数据分析库：numpy pandas matplotlib
	  		 机器学习库：sklearn
	  		 网络请求库：requests
	  		 代码编写库：jupyter
	  		 .....

数据分析：
		Numpy:用来存储和处理大型矩阵,有点像Python列表

		构建Numpy:
				  ones()
				  zeros()
				  random()
				  full()
		索引:
			一维：列表怎么取数据，numpy就怎么取
			多维：
				n[3][4] 取第三行，第四列的数据, 简写n[3,4]
		切片：
			一维：列表怎么切，numpy就怎么切
			多维：
				n[::-1]  行翻转
				n[:, ::-1] 行不动，列翻转
		变形：
			reshape((-1, 6)) 表示行会自动分配,列数是6
			一维变二维，二维变一维
		级联：
			上下合并：
					np.concatenate((n1, n2)) 可以用vstack()
			左右合并：
					np.concatenate((n1, n2), axis=1)  可以用hstack()
		拆分：
			np.vsplit(n, 3) 垂直方向，平均切成3份
			np.hsplit(n, 2) 水平方向
		转置:
			.T
			行转列，列转行

		聚合操作：
				max()
				min()
				mean()
				median()
				sum()
				nansum()
				var() 方差
				std() 标准差
		矩阵操作：
				n1+n2 遵循广播机制，广播机制行数为1或者列数为1的生效
		矩阵乘积dot:
				一维：一一相乘求和
				二维：行*列 求和
		排序：
			sort()

		保存文件：
			save()

		数学函数：
				e=2.718281828459
				np.abs(n) # 绝对值
				np.sqrt(n) # 开平方
				np.square(n) # 平方
				np.exp(n) # 指数
				np.log(n) # 自然对数,以e为底的对数
				np.log(np.e)  # 自然对数,以e为底的对数
				np.log(1)  # 0
				np.log2(n) # 对数
				np.log10(n) # 10为底的对数  常用对数
				np.sin(n) # 正弦
				np.cos(n) # 余弦
				np.tan(n) # 正切
				np.round(n) # 四舍五入
				np.ceil(n) # 向上取整
				np.floor(n) # 向下取整

				np.cumsum(n) # 计算累加和

Pandas:
		Series:
				一维数据，他是有显示索引和隐式索引

				属性：
					values: 获取数据
					index:获取的索引
					shape 形状
					size 大小
					name
				获取数据:
					 显式索引
					 		s[显示索引]
					 		s[[显示索引,显示索引]]
					 		s.loc[显示索引]
					 		s.loc[[显示索引,显示索引]]
					 隐式索引：
					 		s[0]
					 		s[[0,1]]
					 		s.iloc[0]
					 		s.iloc[[0,1]]

					 切片:
					 	显示索引:
					 		s[显示索引:显示索引]  闭区间
					 		s.loc[显示索引:显示索引]
					 	隐式索引:
					 		s[0:1]
					 		s.iloc[0:1]  开区间

				其他方法：
					head()
					tail()
					pd.isnull(s)
					pd.notnull(s)
				计算规则：
					- 在运算中自动对齐索引的数据
					- 如果索引不对应，则补NaN
					- Series没有广播机制
		DataFrame:
				多维的数据结构，有行有列，有显示索引和隐式索引

				取数据：
					  取一列数据
					  		df.列名
					  		df["列名"] 返回一个Series
					  		df[["列名"]] 返回一个DataFrame

					  取多列数据
					  		df[["列名","列名"]] 返回一个DataFrame

					  取一行数据
					  		显示索引
					  			df.loc["显示索引"] 返回Series
					  			df.loc[["显示索引"]] 返回DataFrame
					  		隐式索引
					  			df.iloc[0] 返回Series
					  			df.iloc[[0]] 返回DataFrame
					  取多行数据
					  		 显示索引
					  		  df.loc[["显示索引","显示索引"]]
					  		  隐式索引
					  		  df.iloc[[0,1]]

				取某个数据
						先行后列：
							df.iloc[0]["列名"]
						先列后行：
							df["列名"][0]

				切片：
					 行切片：
					 		隐式索引
					 			df[1 : 3]
					 			df.iloc[1:3]
					 		显示索引
					 			df['小明' : "小绿"]
					 			df.loc['小明' : "小绿"]

					 列切片：	必须先切行，要不全用隐式，要不全用显示
					 		隐式索引
					 			df.iloc[:, 1:3]
					 		显式索引
					 			df.loc[:, "数学": "Python"]
				运算：
					- 在运算中自动对齐索引的数据
					- 如果索引不对应，则补NaN
					- DataFrame没有广播机制

				多层次：
						建议用隐式索引做

				索引堆叠：
						使用stack()的时候，level等于哪一个，哪一个就消失，出现在行里。
						使用unstack()的时候，level等于哪一个，哪一个就消失，出现在列里

				数据合并：
						上下合并，垂直合并
									concat(axis=0)
						左右合并，水平合并
									concat(axis=1)
						追加
							append()
						连接
							merge() 支持 inner、outer、left、right
				数据清洗：
						缺失值处理
							- isnull()
							- notnull()
							- all() 必须全部为True才为True， 类似and
							- any() 只要有一个为True即为True,  类似or

							常用的连接函数：
									df.isnull().any() 返回True或False
									df.isnull().sum() 返回数字

							- dropna():   默认是删除有空的行
							- dropna(axis=1):   默认是删除有空的列

							- fillna():  填充丢失数据

						重复值处理：
								df.duplicated() 判断是否和前面的行重复了
								df.drop_duplicates() 删除重复的行

				函数：
					replace() 替换元素
					map() 适合处理某一单独的列，只适用Series
					apply()函数：既支持 Series，也支持 DataFrame
					applymap 只支持DataFrame，不支持Series

					transform() 一列执行多项计算





Matplotlib:

机器学习：
